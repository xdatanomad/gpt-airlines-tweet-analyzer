
# ========================================
# DATA FILES
#
# **NOTE**: Please create a `data` directory and place the following files in it:
# ========================================
files:
  # Path to the training data file
  training_file: data/airline_train.csv
  test_file: data/airline_test.csv
  training_embeddings_file: data/airline_embeddings.parquet
  fine_tuning_file: data/airline_fine_tune.jsonl
  output_file: data/airline_output.csv

# ========================================
# OPENAI CONFIG
#
# **NOTE**: Please don't forget to set OPENAI_API_KEY environment variable
# ========================================
openai:
  model: gpt-3.5-turbo
  embedding_model: text-embedding-3-small
  fine_tuning_model: gpt-3.5-turbo-0125
  pre_fine_tuned_model: ft:gpt-3.5-turbo-0125:openai-candidate::AeGUzz8x
  # max_tokens: 160000
  # max_prompt_tokens: 8000
  temperature: 0.0
  top_p: 0.0
  frequency_penalty: 0.0
  presence_penalty: 0.0


# ========================================
# PROMPTS
# ========================================

prompts:

  # -----------------------------------
  # 1: ZERO-SHOT PROMPT
  # Uage:
  #  - zero-shot prompt wihtout any context or examples from training set
  #  - stock gpt-3.5-turbo model. Not fine-tuned or trained
  # 
  # Commentary:
  # - This prompt is expected to have a lower accuracy as it is not fine-tuned or trained on any specific task or domain.
  # -----------------------------------
  zero_shot:
    system: You are an expert in identifying airlines mentioned in tweets. 
    prompt: |
      Your task is to take a given tweet and return a list of all airlines referenced, regardless of how they are named or spelled. 
      You have a comprehensive internal reference dictionary of airline names, aliases, abbreviations, social handles, and common misspellings. 
      Use correct canonical airline name as recognized by the aviation industry (e.g., "United" → "United Airlines", "American Air" → "American Airlines").

      Rules:
      - Always return the results in a JSON list format.
      - The JSON should contain all unique airlines mentioned in the tweet, if multiple airlines.
      - Standardize to the airline's correct canonical airline name.
      - If no airlines are mentioned, return an empty list: []
      - Never include extra commentary, only the JSON list.

      Sample JSON Response: `{{"airlines": ["United Airlines", "JetBlue Airways"]}}`

      TASK:
      Now process this tweet:
      {tweet}
  
  # -----------------------------------
  # 2: FEW-SHOT PROMPT
  #
  # Usage:
  #  - This prompt is used by both few-shot prompting and RAG methods
  #
  # Commentary:
  #  - Both the RAG and few-shot prompting methods use the same prompt
  #  - In few-shot prompting, the model uses small _static_ dataset of tweets from the training set
  #  - In RAG, the model uses the same prompt but with dynamically loaded tweets from the training set based on a similarity score to the input tweet
  # -----------------------------------
  few_shot:
    system: You are an expert in identifying airlines mentioned in tweets. 
    prompt: |
      Your task is to take a given tweet and return a list of all airlines referenced, regardless of how they are named or spelled. 
      You have a comprehensive internal reference dictionary of airline names, aliases, abbreviations, social handles, and common misspellings. 
      Use correct canonical airline name as recognized by the aviation industry (e.g., "United" → "United Airlines", "American Air" → "American Airlines").

      Rules:
      - Always return the results in a JSON list format.
      - The JSON should contain all unique airlines mentioned in the tweet, if multiple airlines.
      - Standardize to the airline's correct canonical airline name.
      - If no airlines are mentioned, return an empty list: []
      - Never include extra commentary, only the JSON list.

      Sample JSON Response: `{{"airlines": ["United Airlines", "JetBlue Airways"]}}`

      Example tweets and identified airline names (in CSV format) to improve your accuracy.
      Examples:
      ---------
      {examples}


      TASK:
      Now process this tweet:
      {tweet}

  # -----------------------------------
  # 3: FINE-TUNING PROMPT
  #
  # Usage:
  #  - This prompt is used in conjunction with a pre-finetuned model on the airline identification task
  #  - The model is trained on the training set
  #  - This module should perform similar (or better) to few-shot prompting AND use less tokens
  # ------------------------------------
  fine_tuning:
    system: You are an expert in identifying airlines mentioned in tweets in JSON format. 
    prompt: |
      Respond in a JSON. What airlines are mentioned in this tweet: {tweet}


# Sample JSON response:
# ```json
# {{
#   "airlines": ["United Airlines", "JetBlue Airways"]
# }}
# ```